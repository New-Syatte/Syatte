---
description: Syatt-Project에 관한 규칙입니다.
globs: *.tsx, *.ts, *.js, *.jsx
---
프로젝트 특화 규칙
Next.js 15.1.6버전 활용
페이지와 API 라우트를 명확하게 구분하고, 파일 기반 라우팅을 적극 활용한다.
데이터는 캐싱하고, revalidate를 기본적으로 24시간으로 한다.
결제, 배송 정보 등 유저에게 최신 데이터가 필요한 정보는 페이지 조회 시 revalidate한다.
params는 Next.js 15버전에 맞게 props 타입을 Promise<{slug: string}>으로 사용한다.
그외에 Next.js 15.1.6 버전의 문서를 참고하여 과거 버전 코드는 지양한다.

Sanity와의 통합
Sanity 클라이언트를 사용하여 데이터를 효율적으로 가져오고, force-cache와 revalidate 옵션을 활용하여 성능을 최적화한다.
Sanity의 스키마 변경 시, 관련된 모든 데이터 모델과 쿼리를 업데이트한다.
Redux Toolkit 사용
상태 관리는 Redux Toolkit을 사용하여 일관되게 처리한다.
createSlice와 createAsyncThunk를 사용하여 클라이언트 비동기 로직을 관리한다.

반응형 디자인
Tailwind CSS를 사용하여 반응형 디자인을 구현하고, 다양한 디바이스에서의 사용자 경험을 고려한다.
tailwind.config.js에 명시된 sm, md, lg 등의 Tailwind 브레이크포인트를 활용하여 스타일을 조정한다.
이미지 최적화
next/image 컴포넌트를 사용하여 이미지 최적화를 수행하고, deviceSizes와 imageSizes를 적절히 설정한다.
Sanity 이미지 빌더를 사용하여 필요한 크기와 형식으로 이미지를 변환한다.
테스트
@testing-library/react를 사용하여 컴포넌트 테스트를 작성하고, Jest를 사용하여 테스트 환경을 설정한다.
주요 기능과 컴포넌트에 대한 테스트를 작성하여 코드의 신뢰성을 높인다.
애니메이션
framer-motion을 사용하여 애니메이션을 구현하고, 사용자 인터페이스의 동적 요소를 강화한다.
환경 변수 관리
.env.local 파일을 사용하여 로컬 환경 변수를 관리하고, Vercel 환경 변수와 일치하도록 유지한다.
민감한 정보는 절대 코드베이스에 포함하지 않는다.
폴더 구조
src/app 폴더를 사용하여 페이지와 API 라우트를 구성한다. 각 주요 기능은 별도의 폴더로 나누어 관리한다.
src/components 폴더에는 재사용 가능한 UI 컴포넌트를 저장한다.
src/services 폴더에는 외부 API와의 통신 로직을 포함한다.
src/redux 폴더에는 Redux 관련 파일을 저장하여 상태 관리를 일관되게 처리한다.
src/constants 폴더에는 상수 값을 저장하여 코드의 가독성을 높인다.
src/type 폴더에는 타입을 정리한다.


결론
이 규칙을 준수하여 프로젝트의 특성과 기술 스택에 맞는 효율적인 개발을 촉진하고, 코드의 일관성과 유지보수성을 높인다. 모든 개발자는 이 규칙을 따르도록 하며, 필요에 따라 추가적인 규칙을 제안할 수 있다.고 유지보수가 용이한 코드를 만들 수 있다. 모든 개발자는 이 규칙을 따르도록 하며, 필요에 따라 추가적인 규칙을 제안할 수 있다.